import React, { useEffect, useState } from 'react';
import { QrCode, ExternalLink, Copy, Check } from 'lucide-react';

interface QRCodeProps {
  url: string;
  size?: number;
  title?: string;
  showUrl?: boolean;
  showCopyButton?: boolean;
  className?: string;
}

export const QRCodeDisplay: React.FC<QRCodeProps> = ({ 
  url, 
  size = 200, 
  title,
  showUrl = true,
  showCopyButton = true,
  className = "" 
}) => {
  const [qrDataUrl, setQrDataUrl] = useState<string>('');
  const [copied, setCopied] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const generateQRCode = async () => {
      try {
        setLoading(true);
        // Using QR Server API for QR code generation
        // In production, consider using a local QR code library for better reliability
        const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(url)}&bgcolor=1e293b&color=ffffff&format=svg&ecc=M&margin=1`;
        setQrDataUrl(qrApiUrl);
      } catch (error) {
        console.error('Error generating QR code:', error);
      } finally {
        setLoading(false);
      }
    };

    if (url) {
      generateQRCode();
    }
  }, [url, size]);

  const handleCopyUrl = async () => {
    try {
      await navigator.clipboard.writeText(url);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy URL:', error);
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      textArea.value = url;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleOpenUrl = () => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  if (!url) {
    return (
      <div className={`flex items-center justify-center bg-slate-800 rounded-lg border-2 border-dashed border-slate-600 ${className}`}>
        <div className="text-center p-8">
          <QrCode className="w-12 h-12 text-slate-500 mx-auto mb-2" />
          <p className="text-slate-500 text-sm">No URL provided</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-700/50 p-6 ${className}`}>
      {title && (
        <h3 className="text-xl font-bold text-white mb-4 text-center">{title}</h3>
      )}
      
      {/* QR Code Container */}
      <div className="flex justify-center mb-6">
        <div className="relative">
          {loading ? (
            <div 
              className="flex items-center justify-center bg-slate-700 rounded-lg border-2 border-dashed border-slate-600 animate-pulse"
              style={{ width: size, height: size }}
            >
              <QrCode className="w-12 h-12 text-slate-500" />
            </div>
          ) : qrDataUrl ? (
            <div className="bg-white p-3 rounded-lg shadow-lg">
              <img 
                src={qrDataUrl} 
                alt="QR Code"
                className="block"
                style={{ width: size - 24, height: size - 24 }}
                onError={() => {
                  console.error('Failed to load QR code image');
                  setQrDataUrl('');
                }}
              />
            </div>
          ) : (
            <div 
              className="flex items-center justify-center bg-slate-700 rounded-lg border-2 border-dashed border-slate-600"
              style={{ width: size, height: size }}
            >
              <div className="text-center">
                <QrCode className="w-12 h-12 text-slate-500 mx-auto mb-2" />
                <p className="text-slate-500 text-xs">Failed to load</p>
              </div>
            </div>
          )}
          
          {/* Loading overlay */}
          {loading && (
            <div className="absolute inset-0 flex items-center justify-center bg-slate-800/80 rounded-lg">
              <div className="flex flex-col items-center">
                <div className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mb-2"></div>
                <p className="text-white text-sm">Generating...</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* URL Display and Actions */}
      {showUrl && (
        <div className="space-y-3">
          <div className="bg-slate-900/50 p-3 rounded border border-slate-600">
            <p className="text-slate-400 text-xs mb-1">Scan QR code or visit:</p>
            <code className="text-blue-400 text-sm break-all block">
              {url}
            </code>
          </div>
          
          {/* Action Buttons */}
          <div className="flex gap-2">
            {showCopyButton && (
              <button
                onClick={handleCopyUrl}
                className={`
                  flex items-center gap-2 px-3 py-2 rounded text-sm font-medium transition-all duration-200
                  ${copied 
                    ? 'bg-green-600 hover:bg-green-700 text-green-100' 
                    : 'bg-slate-700 hover:bg-slate-600 text-slate-200'
                  }
                `}
                disabled={copied}
              >
                {copied ? (
                  <>
                    <Check className="w-4 h-4" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    Copy URL
                  </>
                )}
              </button>
            )}
            
            <button
              onClick={handleOpenUrl}
              className="flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-blue-100 rounded text-sm font-medium transition-colors"
            >
              <ExternalLink className="w-4 h-4" />
              Open
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Alternative QR Code component for inline use (smaller, simpler)
export const InlineQRCode: React.FC<{
  url: string;
  size?: number;
  className?: string;
}> = ({ url, size = 120, className = "" }) => {
  const [qrDataUrl, setQrDataUrl] = useState<string>('');

  useEffect(() => {
    if (url) {
      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(url)}&bgcolor=ffffff&color=000000&format=svg&ecc=M&margin=0`;
      setQrDataUrl(qrApiUrl);
    }
  }, [url, size]);

  if (!qrDataUrl) {
    return (
      <div 
        className={`flex items-center justify-center bg-slate-200 rounded border ${className}`}
        style={{ width: size, height: size }}
      >
        <QrCode className="w-8 h-8 text-slate-500" />
      </div>
    );
  }

  return (
    <div className={`bg-white rounded border shadow-sm ${className}`}>
      <img 
        src={qrDataUrl} 
        alt="QR Code"
        className="w-full h-full rounded"
        style={{ width: size, height: size }}
      />
    </div>
  );
};

export default QRCodeDisplay;