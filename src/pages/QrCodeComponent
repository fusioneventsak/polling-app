import React, { useEffect, useState, useRef } from 'react';
import { QrCode, ExternalLink, Copy, Check } from 'lucide-react';

interface QRCodeProps {
  url: string;
  size?: number;
  title?: string;
  showUrl?: boolean;
  showCopyButton?: boolean;
  className?: string;
}

export const QRCodeDisplay: React.FC<QRCodeProps> = ({ 
  url, 
  size = 200, 
  title,
  showUrl = true,
  showCopyButton = true,
  className = "" 
}) => {
  const [qrDataUrl, setQrDataUrl] = useState<string>('');
  const [copied, setCopied] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const lastUrlRef = useRef<string>('');
  const lastSizeRef = useRef<number>(0);

  useEffect(() => {
    // Only generate QR code if URL or size actually changed
    if (url && (url !== lastUrlRef.current || size !== lastSizeRef.current)) {
      const generateQRCode = async () => {
        try {
          setLoading(true);
          setError(false);
          
          // Store current values to prevent unnecessary re-generations
          lastUrlRef.current = url;
          lastSizeRef.current = size;
          
          // Using QR Server API for QR code generation
          const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(url)}&bgcolor=1e293b&color=ffffff&format=svg&ecc=M&margin=1`;
          
          // Pre-load the image to ensure it's valid before setting
          const img = new Image();
          img.onload = () => {
            setQrDataUrl(qrApiUrl);
            setLoading(false);
          };
          img.onerror = () => {
            setError(true);
            setLoading(false);
          };
          img.src = qrApiUrl;
          
        } catch (error) {
          console.error('Error generating QR code:', error);
          setError(true);
          setLoading(false);
        }
      };

      generateQRCode();
    }
  }, [url, size]); // Dependencies are still here but controlled by ref check

  const handleCopyUrl = async () => {
    try {
      await navigator.clipboard.writeText(url);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy URL:', error);
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      textArea.value = url;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleOpenUrl = () => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  if (!url) {
    return (
      <div className={`flex items-center justify-center bg-slate-800 rounded-lg border-2 border-dashed border-slate-600 ${className}`}>
        <div className="text-center p-8">
          <QrCode className="w-12 h-12 text-slate-500 mx-auto mb-2" />
          <p className="text-slate-500 text-sm">No URL provided</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-sm rounded-xl border border-slate-700/50 p-8 ${className}`}>
      {title && (
        <h3 className="text-2xl font-bold text-white mb-6 text-center">{title}</h3>
      )}
      
      {/* QR Code Container with Beautiful Styling */}
      <div className="flex justify-center mb-8">
        <div className="relative">
          {loading ? (
            <div 
              className="flex items-center justify-center bg-slate-700/50 rounded-xl border-2 border-dashed border-slate-600 animate-pulse"
              style={{ width: size + 40, height: size + 40 }}
            >
              <div className="text-center">
                <div className="w-12 h-12 border-3 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-3"></div>
                <p className="text-slate-400 text-sm">Generating QR Code...</p>
              </div>
            </div>
          ) : error ? (
            <div 
              className="flex items-center justify-center bg-red-900/20 rounded-xl border-2 border-dashed border-red-600/50"
              style={{ width: size + 40, height: size + 40 }}
            >
              <div className="text-center">
                <QrCode className="w-12 h-12 text-red-500 mx-auto mb-2" />
                <p className="text-red-400 text-sm">Failed to generate</p>
              </div>
            </div>
          ) : qrDataUrl ? (
            <div className="relative">
              {/* Glow effect */}
              <div 
                className="absolute inset-0 bg-white/20 rounded-2xl blur-xl"
                style={{ margin: '-10px' }}
              ></div>
              
              {/* Main QR container */}
              <div className="relative bg-white p-6 rounded-2xl shadow-2xl border border-white/20">
                <img 
                  src={qrDataUrl} 
                  alt="QR Code"
                  className="block rounded-lg"
                  style={{ width: size, height: size }}
                  onError={() => {
                    console.error('Failed to load QR code image');
                    setError(true);
                  }}
                />
              </div>
              
              {/* Decorative corners */}
              <div className="absolute -top-2 -left-2 w-6 h-6 border-t-2 border-l-2 border-blue-400 rounded-tl-lg"></div>
              <div className="absolute -top-2 -right-2 w-6 h-6 border-t-2 border-r-2 border-blue-400 rounded-tr-lg"></div>
              <div className="absolute -bottom-2 -left-2 w-6 h-6 border-b-2 border-l-2 border-blue-400 rounded-bl-lg"></div>
              <div className="absolute -bottom-2 -right-2 w-6 h-6 border-b-2 border-r-2 border-blue-400 rounded-br-lg"></div>
            </div>
          ) : null}
        </div>
      </div>

      {/* URL Display and Actions */}
      {showUrl && qrDataUrl && (
        <div className="space-y-4">
          <div className="bg-slate-900/60 p-4 rounded-lg border border-slate-600/50 backdrop-blur-sm">
            <p className="text-slate-400 text-sm mb-2 font-medium">Scan QR code or visit:</p>
            <code className="text-blue-400 text-sm break-all block bg-slate-800/50 p-2 rounded border border-slate-700">
              {url}
            </code>
          </div>
          
          {/* Action Buttons */}
          <div className="flex gap-3 justify-center">
            {showCopyButton && (
              <button
                onClick={handleCopyUrl}
                className={`
                  flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-lg
                  ${copied 
                    ? 'bg-green-600 hover:bg-green-700 text-green-100 shadow-green-500/25' 
                    : 'bg-slate-700/80 hover:bg-slate-600/80 text-slate-200 shadow-slate-900/50 backdrop-blur-sm border border-slate-600/50'
                  }
                `}
                disabled={copied}
              >
                {copied ? (
                  <>
                    <Check className="w-4 h-4" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    Copy URL
                  </>
                )}
              </button>
            )}
            
            <button
              onClick={handleOpenUrl}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600/90 hover:bg-blue-700/90 text-blue-100 rounded-lg text-sm font-medium transition-colors shadow-lg shadow-blue-500/25 backdrop-blur-sm border border-blue-500/30"
            >
              <ExternalLink className="w-4 h-4" />
              Open Link
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Alternative QR Code component for inline use (smaller, simpler) - also stable
export const InlineQRCode: React.FC<{
  url: string;
  size?: number;
  className?: string;
}> = ({ url, size = 120, className = "" }) => {
  const [qrDataUrl, setQrDataUrl] = useState<string>('');
  const lastUrlRef = useRef<string>('');
  const lastSizeRef = useRef<number>(0);

  useEffect(() => {
    // Only generate if values actually changed
    if (url && (url !== lastUrlRef.current || size !== lastSizeRef.current)) {
      lastUrlRef.current = url;
      lastSizeRef.current = size;
      
      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(url)}&bgcolor=ffffff&color=000000&format=svg&ecc=M&margin=0`;
      setQrDataUrl(qrApiUrl);
    }
  }, [url, size]);

  if (!qrDataUrl) {
    return (
      <div 
        className={`flex items-center justify-center bg-slate-200 rounded border ${className}`}
        style={{ width: size, height: size }}
      >
        <QrCode className="w-8 h-8 text-slate-500" />
      </div>
    );
  }

  return (
    <div className={`bg-white rounded-lg border shadow-sm ${className}`}>
      <img 
        src={qrDataUrl} 
        alt="QR Code"
        className="w-full h-full rounded-lg"
        style={{ width: size, height: size }}
      />
    </div>
  );
};

export default QRCodeDisplay;